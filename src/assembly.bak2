#include "assembly.h"

char* REG_NAME[REG_NUM] = {
    "$0",  "$at", "$v0", "$v1", "$a0", "$a1", "$a2", "$a3", "$t0", "$t1", "$t2",
    "$t3", "$t4", "$t5", "$t6", "$t7", "$s0", "$s1", "$s2", "$s3", "$s4", "$s5",
    "$s6", "$s7", "$t8", "$t9", "$k0", "$k1", "$gp", "$sp", "$fp", "$ra"};

Registers registers;
VarTable varTable;


Register newRegister(char* regName) {
    Register p = (Register)malloc(sizeof(struct Register_));
    p->avail = true;
    p->name = regName;
}

Registers initRegisters() {
    Registers p = (Registers)malloc(sizeof(struct Registers_));
    for (int i = 0; i < REG_NUM; i++) {
        p->regList[i] = newRegister(REG_NAME[i]);
        p->regList[i]->avail = false;
    }
    p->clock = 0;
    return p;
}

void deleteRegisters() {
    for (int i = 0; i < REG_NUM; i++) {
        free(registers->regList[i]);
    }
    free(registers);
}

void resetRegisters() {
    for (int i = T0; i <= T9; i++) {
        registers->regList[i]->avail = true;
    }
}

VariableList newVariableList() {
    VariableList p = (VariableList)malloc(sizeof(struct VariableList_));
    p->head = NULL;
    p->cur = NULL;
    return p;
}

void clearVariableList(VariableList varList) {
    Varible temp = varList->head;
    while (temp) {
        Varible p = temp;
        temp = temp->next;
        free(p);
    }
    varList->head = NULL;
    varList->cur = NULL;
}

VarTable newVarTable() {
    VarTable p = (VarTable)malloc(sizeof(struct VarTable_));
    p->varListReg = newVariableList();
    p->inFunc = false;
    p->funcName = NULL;
    p->stackDepth = 0;
    return p;
}

void deleteVarTable() {
    clearVariableList(varTable->varListReg);
    free(varTable->varListReg);
    free(varTable);
}

Varible newVarible(int regNo, Operand op) {
    Varible p = (Varible)malloc(sizeof(struct Varible_));
    p->regNo = regNo;
    p->op = op;
    p->next = NULL;
    p->stackDepth = 0;
    p->inStack = false;
}

void addVarible(VariableList varList, int regNo, Operand op) {
    Varible newVar = newVarible(regNo, op);
    if (varList->head == NULL) {
        varList->head = newVar;
        varList->cur = newVar;
    } else {
        varList->cur->next = newVar;
        varList->cur = newVar;
    }
}

void delVarible(VariableList varList, Varible var) {
    if (var == varList->head) {
        varList->head = varList->head->next;
    } else {
        Varible temp = varList->head;
        while (temp) {
            if (temp->next == var) break;
            temp = temp->next;
        }
        if (varList->cur == var) varList->cur = temp;
        temp->next = var->next;
        free(var);
    }
}

int getVarible(FILE* fp, Operand op) {
    if (op->kind != CONSTANT) {
        Varible temp = varTable->varListReg->head;
        while (temp) {
            if (temp->op->kind != CONSTANT && !strcmp(temp->op->u.name, op->u.name))
                if (temp->inStack)
                    return getReg(fp, op, temp);
                else
                    return temp->regNo;
            temp = temp->next;
        }
        int regNo = getReg(fp, op, NULL);
        return regNo;
    } else {
        if (op->u.val == 0) return ZERO;
        int regNo = getReg(fp, op, NULL);
        fprintf(fp, "  li %s, %d\n", registers->regList[regNo]->name, op->u.val);
        return regNo;
    }
}

int getReg(FILE *fp, Operand op, Varible stackVar) {
    if (stackVar == NULL) {
        // 检查空闲寄存器
        for (int i = T0; i <= T9; i++) {
            if (registers->regList[i]->avail) {
                registers->regList[i]->avail = false;
                addVarible(varTable->varListReg, i, op);
                return i;
            }
        }
        // 无空闲寄存器，先考虑释放立即数
        Varible temp = varTable->varListReg->head;
        while (temp) {
            if (temp->op->kind == CONSTANT && (temp->regNo >= T0 && temp->regNo <= T9)) {
                int regNo = temp->regNo;
                delVarible(varTable->varListReg, temp);
                addVarible(varTable->varListReg, regNo, op);
                return regNo;
            }
            temp = temp->next;
        }

        // 无立即数，按CLOCK算法将溢出变量入栈并释放
        int regNo = registers->clock + T0;
        temp = varTable->varListReg->head;
        while (temp->regNo != regNo) temp = temp->next;
        fprintf(fp, "  addi $sp, $sp, -4\n");
        fprintf(fp, "  sw %s, 0($sp)\n", registers->regList[regNo]->name);
        temp->inStack = true;
        registers->clock = (registers->clock + 1) % (T9 - T0 + 1);
        varTable->stackDepth += 4;
        temp->stackDepth = varTable->stackDepth;
        addVarible(varTable->varListReg, regNo, op);
        return regNo;
    } else if (stackVar != NULL) {
        // 检查空闲寄存器
        for (int i = T0; i <= T9; i++) {
            if (registers->regList[i]->avail) {
                registers->regList[i]->avail = false;
                stackVar->inStack = false;
                fprintf(fp, "  lw %s, -%d($fp)\n", registers->regList[i]->name, stackVar->stackDepth);
                return i;
            }
        }
        // 无空闲寄存器，先考虑释放立即数
        Varible temp = varTable->varListReg->head;
        while (temp) {
            if (temp->op->kind == CONSTANT && (temp->regNo >= T0 && temp->regNo <= T9)) {
                int regNo = temp->regNo;
                delVarible(varTable->varListReg, temp);
                stackVar->inStack = false;
                fprintf(fp, "  lw %s, -%d($fp)\n", registers->regList[regNo]->name, stackVar->stackDepth);
                return regNo;
            }
            temp = temp->next;
        }

        // 无立即数，按CLOCK算法将溢出变量入栈并释放
        int regNo = registers->clock + T0;
        temp = varTable->varListReg->head;
        while (temp->regNo != regNo) temp = temp->next;
        fprintf(fp, "  addi $sp, $sp, -4\n");
        fprintf(fp, "  sw %s, 0($sp)\n", registers->regList[regNo]->name);
        temp->inStack = true;
        registers->clock = (registers->clock + 1) % (T9 - T0 + 1) + T0;
        varTable->stackDepth += 4;
        temp->stackDepth = varTable->stackDepth;
        stackVar->inStack = false;
        fprintf(fp, "  lw %s, -%d($fp)\n", registers->regList[regNo]->name, stackVar->stackDepth);
        return regNo;   
    }
    return T0;
}

void genAssemblyCode(FILE* fp) {
    registers = initRegisters();
    varTable = newVarTable();
    initAsm(fp);
    InterCodes temp = interCodeList->head;
    while (temp) {
        Ir2Asm(fp, temp);
        temp = temp->next;
    }
    deleteRegisters();
    deleteVarTable();
}

void initAsm(FILE* fp) {
    fprintf(fp, ".data\n");
    fprintf(fp, "_prompt: .asciiz \"Enter an integer:\"\n");
    fprintf(fp, "_ret: .asciiz \"\\n\"\n");
    fprintf(fp, ".globl main\n");

    InterCodes temp = interCodeList->head;
    while (temp) {
        if (temp->code->kind == DEC)
            fprintf(fp, "%s: .word %d\n", temp->code->u.dec.op->u.name, temp->code->u.dec.size);
        temp = temp->next;
    }

    // read function
    fprintf(fp, ".text\n");
    fprintf(fp, "read:\n");
    fprintf(fp, "  li $v0, 4\n");
    fprintf(fp, "  la $a0, _prompt\n");
    fprintf(fp, "  syscall\n");
    fprintf(fp, "  li $v0, 5\n");
    fprintf(fp, "  syscall\n");
    fprintf(fp, "  jr $ra\n\n");

    // write function
    fprintf(fp, "write:\n");
    fprintf(fp, "  li $v0, 1\n");
    fprintf(fp, "  syscall\n");
    fprintf(fp, "  li $v0, 4\n");
    fprintf(fp, "  la $a0, _ret\n");
    fprintf(fp, "  syscall\n");
    fprintf(fp, "  move $v0, $0\n");
    fprintf(fp, "  jr $ra\n");
}

void Ir2Asm(FILE* fp, InterCodes interCodes) {
    InterCode interCode = interCodes->code;
    int kind = interCode->kind;

    if (kind == LABEL) {
        fprintf(fp, "%s:\n", interCode->u.sinOp.op->u.name);
    } else if (kind == FUNCTION) {
        fprintf(fp, "\n%s:\n", interCode->u.sinOp.op->u.name);
        
        // 进入函数时，将所有寄存器置为可用
        resetRegisters();
        clearVariableList(varTable->varListReg);
        
        // 进入函数时，先保存fp， 将栈深度置为0
        fprintf(fp, "  addi $sp, $sp, -4\n");
        fprintf(fp, "  sw $fp, 0($sp)\n");
        fprintf(fp, "  move $fp, $sp\n");
        varTable->stackDepth = 0;
        
        if (!strcmp(interCode->u.sinOp.op->u.name, "main")) {
            varTable->inFunc = false;
            varTable->funcName = NULL;
        } else {
            pushs(fp);
            varTable->inFunc = true;
            varTable->funcName = interCode->u.sinOp.op->u.name;

            // 处理形参 PARAM
            TableItem item = searchTableItem(interCode->u.sinOp.op->u.name);
            int argc = 0;
            InterCodes temp = interCodes->next;
            while (temp && temp->code->kind == PARAM) {
                // 前4个参数存到a0 到a3中
                if (argc < 4) {
                    addVarible(varTable->varListReg, A0 + argc, temp->code->u.sinOp.op);
                } else {
                    // 剩下的要用栈存
                    int regNo = getVarible(fp, temp->code->u.sinOp.op);
                    fprintf(fp, "  lw %s, %d($fp)\n", registers->regList[regNo]->name,
                        (item->fieldList->type->u.function.argc - argc) * 4 + 36);
                }
                argc++;
                temp = temp->next;
            }
        }
    } else if (kind == GOTO) {
        fprintf(fp, "  j %s\n", interCode->u.sinOp.op->u.name);
    } else if (kind == RETURN) {
        if (varTable->inFunc) {
            fprintf(fp, "  move $sp, $fp\n");
            fprintf(fp, "  addi $sp, $sp, -32\n");
            pops(fp);
            fprintf(fp, "  lw $fp, 0($sp)\n");
            fprintf(fp, "  addi $sp, $sp, 4\n");
        }
        int RegNo = getVarible(fp, interCode->u.sinOp.op);
        fprintf(fp, "  move $v0, %s\n", registers->regList[RegNo]->name);
        fprintf(fp, "  jr $ra\n");
    } else if (kind == ARG) {
        // 需要在call里处理
    } else if (kind == PARAM) {
        // 需要在function里处理
    } else if (kind == READ) {
        fprintf(fp, "  addi $sp, $sp, -4\n");
        fprintf(fp, "  sw $ra, 0($sp)\n");
        fprintf(fp, "  jal read\n");
        fprintf(fp, "  lw $ra, 0($sp)\n");
        fprintf(fp, "  addi $sp, $sp, 4\n");
        int RegNo = getVarible(fp, interCode->u.sinOp.op);
        fprintf(fp, "  move %s, $v0\n", registers->regList[RegNo]->name);
    } else if (kind == WRITE) {
        int RegNo = getVarible(fp, interCode->u.sinOp.op);
        if (varTable->inFunc == false) {
            fprintf(fp, "  move $a0, %s\n", registers->regList[RegNo]->name);
            fprintf(fp, "  addi $sp, $sp, -4\n");
            fprintf(fp, "  sw $ra, 0($sp)\n");
            fprintf(fp, "  jal write\n");
            fprintf(fp, "  lw $ra, 0($sp)\n");
            fprintf(fp, "  addi $sp, $sp, 4\n");
        } else {
            // 函数嵌套调用，先将a0压栈 调用结束以后需要恢复a0
            fprintf(fp, "  addi $sp, $sp, -8\n");
            fprintf(fp, "  sw $a0, 0($sp)\n");
            fprintf(fp, "  sw $ra, 4($sp)\n");
            fprintf(fp, "  move $a0, %s\n", registers->regList[RegNo]->name);
            fprintf(fp, "  jal write\n");
            fprintf(fp, "  lw $a0, 0($sp)\n");
            fprintf(fp, "  lw $ra, 4($sp)\n");
            fprintf(fp, "  addi $sp, $sp, 8\n");
        }
    } else if (kind == ASSIGN) {
        int leftRegNo = getVarible(fp, interCode->u.assign.left);
        // 右值为立即数，直接放左值寄存器里
        if (interCode->u.assign.right->kind == CONSTANT) {
            fprintf(fp, "  li %s, %d\n", registers->regList[leftRegNo]->name,
                    interCode->u.assign.right->u.val);
        }
        // 右值为变量，先get再move赋值寄存器
        else {
            int rightRegNo = getVarible(fp, interCode->u.assign.right);
            fprintf(fp, "  move %s, %s\n", registers->regList[leftRegNo]->name,
                    registers->regList[rightRegNo]->name);
        }
    } else if (kind == GET_ADDR) {
        int leftRegNo = getVarible(fp, interCode->u.assign.left);
        fprintf(fp, "  la %s, %s\n", registers->regList[leftRegNo]->name,
                interCode->u.assign.right->u.name);
    } else if (kind == READ_ADDR) {
        int leftRegNo = getVarible(fp, interCode->u.assign.left);
        int rightRegNo = getVarible(fp, interCode->u.assign.right);
        fprintf(fp, "  lw %s, 0(%s)\n", registers->regList[leftRegNo]->name,
                registers->regList[rightRegNo]->name);
    } else if (kind == WRITE_ADDR) {
        int leftRegNo = getVarible(fp, interCode->u.assign.left);
        int rightRegNo = getVarible(fp, interCode->u.assign.right);
        fprintf(fp, "  sw %s, 0(%s)\n", registers->regList[rightRegNo]->name,
                registers->regList[leftRegNo]->name);
    } else if (kind == CALL) {
        TableItem callee = searchTableItem(interCode->u.assign.right->u.name);
        int leftRegNo = getVarible(fp, interCode->u.assign.left);
        
        // 调用者保存寄存器入栈
        pusht(fp);

        // 如果是函数嵌套调用，返回地址入栈，形参入栈
        fprintf(fp, "  addi $sp, $sp, -4\n");
        fprintf(fp, "  sw $ra, 0($sp)\n");
        fprintf(fp, "  addi $sp, $sp, -%d\n", 4 * 4);
        for (int i = 0; i < 4; i++) {
            fprintf(fp, "  sw %s, %d($sp)\n", registers->regList[A0 + i]->name, i * 4); 
        }
        varTable->stackDepth += 4 + 4 * 4;
        // 处理实参 ARG
        InterCodes arg = interCodes->prev;
        int argc = 0;
        while (arg && argc < callee->fieldList->type->u.function.argc) {
            if (arg->code->kind == ARG) {
                int argRegNo = getVarible(fp, arg->code->u.sinOp.op);
                // 前4个参数直接用寄存器存
                if (argc < 4) {
                    if (argRegNo >= A0 && argRegNo <= A3) {
                        fprintf(fp, "  lw %s, %d($sp)\n",
                        registers->regList[A0 + argc]->name,
                        (argRegNo - A0) * 4);
                    } else {
                        fprintf(fp, "  move %s, %s\n",
                            registers->regList[A0 + argc]->name,
                            registers->regList[argRegNo]->name);
                    }
                    argc++;
                }
                // 4个以后的参数压栈
                else {
                    fprintf(fp, "  addi $sp, $sp, -4\n");
                    fprintf(fp, "  sw %s, 0($sp)\n", registers->regList[argRegNo]->name);
                    argc++;
                    varTable->stackDepth += 4;
                }
            }
            arg = arg->prev;
        }
        // 函数调用
        fprintf(fp, "  jal %s\n", interCode->u.assign.right->u.name);

        // 调用完后恢复栈指针、形参，然后恢复之前保存入栈的寄存器信息
        if (argc > 4) {
            fprintf(fp, "  addi $sp, $sp, %d\n", 4 * (argc - 4));
            varTable->stackDepth -= 4 * (argc - 4);
        }
        for (int i = 0; i < 4; i++) {
            fprintf(fp, "  lw %s, %d($sp)\n", registers->regList[A0 + i]->name, i * 4);
        }
        fprintf(fp, "  addi $sp, $sp, %d\n", 4 * 4);  
        fprintf(fp, "  lw $ra, 0($sp)\n");
        fprintf(fp, "  addi $sp, $sp, 4\n");
        varTable->stackDepth -= 4 * 4 + 4;
        popt(fp);
        fprintf(fp, "  move %s, $v0\n", registers->regList[leftRegNo]->name);
    } else if (kind == ADD) {
        int resultRegNo = getVarible(fp, interCode->u.binOp.result);
        // 常数 常数
        if (interCode->u.binOp.op1->kind == CONSTANT &&
            interCode->u.binOp.op2->kind == CONSTANT) {
            fprintf(fp, "  li %s, %d\n", registers->regList[resultRegNo]->name,
                    interCode->u.binOp.op1->u.val + interCode->u.binOp.op2->u.val);
        }
        // 变量 常数
        else if (interCode->u.binOp.op1->kind != CONSTANT &&
                 interCode->u.binOp.op2->kind == CONSTANT) {
            int op1RegNo = getVarible(fp, interCode->u.binOp.op1);
            fprintf(fp, "  addi %s, %s, %d\n", registers->regList[resultRegNo]->name,
                    registers->regList[op1RegNo]->name,
                    interCode->u.binOp.op2->u.val);
        }
        // 变量 变量
        else {
            int op1RegNo = getVarible(fp, interCode->u.binOp.op1);
            int op2RegNo = getVarible(fp, interCode->u.binOp.op2);
            fprintf(fp, "  add %s, %s, %s\n",
                    registers->regList[resultRegNo]->name,
                    registers->regList[op1RegNo]->name,
                    registers->regList[op2RegNo]->name);
        }
    } else if (kind == SUB) {
        int resultRegNo = getVarible(fp, interCode->u.binOp.result);
        // 常数 常数
        if (interCode->u.binOp.op1->kind == CONSTANT &&
            interCode->u.binOp.op2->kind == CONSTANT) {
            fprintf(fp, "  li %s, %d\n", registers->regList[resultRegNo]->name,
                    interCode->u.binOp.op1->u.val - interCode->u.binOp.op2->u.val);
        }
        // 变量 常数
        else if (interCode->u.binOp.op1->kind != CONSTANT &&
                 interCode->u.binOp.op2->kind == CONSTANT) {
            int op1RegNo = getVarible(fp, interCode->u.binOp.op1);
            fprintf(fp, "  addi %s, %s, %d\n", registers->regList[resultRegNo]->name,
                    registers->regList[op1RegNo]->name,
                    -interCode->u.binOp.op2->u.val);
        }
        // 变量 变量
        else {
            int op1RegNo = getVarible(fp, interCode->u.binOp.op1);
            int op2RegNo = getVarible(fp, interCode->u.binOp.op2);
            fprintf(fp, "  sub %s, %s, %s\n",
                    registers->regList[resultRegNo]->name,
                    registers->regList[op1RegNo]->name,
                    registers->regList[op2RegNo]->name);
        }
    } else if (kind == MUL) {
        int resultRegNo = getVarible(fp, interCode->u.binOp.result);
        int op1RegNo = getVarible(fp, interCode->u.binOp.op1);
        int op2RegNo = getVarible(fp, interCode->u.binOp.op2);
        fprintf(fp, "  mul %s, %s, %s\n", registers->regList[resultRegNo]->name,
                registers->regList[op1RegNo]->name,
                registers->regList[op2RegNo]->name);
    } else if (kind == DIV) {
        int resultRegNo = getVarible(fp, interCode->u.binOp.result);
        int op1RegNo = getVarible(fp, interCode->u.binOp.op1);
        int op2RegNo = getVarible(fp, interCode->u.binOp.op2);
        fprintf(fp, "  div %s, %s\n", registers->regList[op1RegNo]->name,
                registers->regList[op2RegNo]->name);
        fprintf(fp, "  mflo %s\n", registers->regList[resultRegNo]->name);
    } else if (kind == DEC) {
        // init 时候添加到全局变量里了
    } else if (kind == IF_GOTO) {
        char* relopName = interCode->u.ifGoto.relop->u.name;
        int xRegNo = getVarible(fp, interCode->u.ifGoto.x);
        int yRegNo = getVarible(fp, interCode->u.ifGoto.y);
        if (!strcmp(relopName, "=="))
            fprintf(fp, "  beq %s, %s, %s\n", registers->regList[xRegNo]->name,
                    registers->regList[yRegNo]->name,
                    interCode->u.ifGoto.z->u.name);
        else if (!strcmp(relopName, "!="))
            fprintf(fp, "  bne %s, %s, %s\n", registers->regList[xRegNo]->name,
                    registers->regList[yRegNo]->name,
                    interCode->u.ifGoto.z->u.name);
        else if (!strcmp(relopName, ">"))
            fprintf(fp, "  bgt %s, %s, %s\n", registers->regList[xRegNo]->name,
                    registers->regList[yRegNo]->name,
                    interCode->u.ifGoto.z->u.name);
        else if (!strcmp(relopName, "<"))
            fprintf(fp, "  blt %s, %s, %s\n", registers->regList[xRegNo]->name,
                    registers->regList[yRegNo]->name,
                    interCode->u.ifGoto.z->u.name);
        else if (!!strcmp(relopName, ">="))
            fprintf(fp, "  bge %s, %s, %s\n", registers->regList[xRegNo]->name,
                    registers->regList[yRegNo]->name,
                    interCode->u.ifGoto.z->u.name);
        else if (strcmp(relopName, "<="))
            fprintf(fp, "  ble %s, %s, %s\n", registers->regList[xRegNo]->name,
                    registers->regList[yRegNo]->name,
                    interCode->u.ifGoto.z->u.name);
    }
}

void pusht(FILE* fp) {
    fprintf(fp, "  addi $sp, $sp, -40\n");
    for (int i = T0; i <= T7; i++) {
        fprintf(fp, "  sw %s, %d($sp)\n", registers->regList[i]->name, (i - T0) * 4);
    }
    for (int i = T8; i <= T9; i++) {
        fprintf(fp, "  sw %s, %d($sp)\n", registers->regList[i]->name, (i - T0 - 8) * 4);
    }
    varTable->stackDepth += 40;
}

void popt(FILE* fp) {
    for (int i = T0; i <= T7; i++) {
        fprintf(fp, "  lw %s, %d($sp)\n", registers->regList[i]->name, (i - T0) * 4);
    }
    for (int i = T8; i <= T9; i++) {
        fprintf(fp, "  lw %s, %d($sp)\n", registers->regList[i]->name, (i - T0 - 8) * 4);
    }
    fprintf(fp, "  addi $sp, $sp, 40\n");
    varTable->stackDepth -= 4;
}

void pushs(FILE* fp) {
    fprintf(fp, "  addi $sp, $sp, -32\n");
    for (int i = S0; i <= S7; i++) {
        fprintf(fp, "  sw %s, %d($sp)\n", registers->regList[i]->name, (i - S0) * 4);
    }
    varTable->stackDepth += 32;
}

void pops(FILE* fp) {
    for (int i = S0; i <= S7; i++) {
        fprintf(fp, "  lw %s, %d($sp)\n", registers->regList[i]->name, (i - S0) * 4);
    }
    fprintf(fp, "  addi $sp, $sp, 32\n");
    varTable->stackDepth -= 32;
}
