%{
#include "node.h"
#include "lex.yy.c"


Node* root;
extern int errornum;
void yyerror(char* msg);
%}

// Tokens
%token INT FLOAT STRUCT ID TYPE COMMA SEMI DOT
%token PLUS MINUS STAR DIV RELOP ASSIGNOP
%token AND OR NOT IF ELSE WHILE 
%token RETURN LP RP LB RB LC RC 

// High-level Definitions
%type Program ExtDefList ExtDef ExtDecList   
// Specifiers
%type Specifier StructSpecifier OptTag Tag 
// Declarators 
%type VarDec FunDec VarList ParamDec    
// Statements     
%type CompSt StmtList Stmt   
// Local Definitions                
%type DefList Def Dec DecList   
// Expressions
%type Exp Args   

// Precedence & Associativity
%right ASSIGNOP
%left OR
%left AND
%left RELOP
%left PLUS MINUS
%left STAR DIV
%right NOT
%left DOT
%left LB RB
%left LP RP
%nonassoc LOWER_THAN_ELSE
%nonassoc ELSE


%%

Program: ExtDefList 
    ;
ExtDefList: ExtDef ExtDefList 
    | /* empty */ 
    ;
ExtDef: Specifier ExtDecList SEMI 
    | Specifier SEMI 
    | Specifier FunDec CompSt 
    ;
ExtDecList: VarDec 
    | VarDec COMMA ExtDecList 
    ;
Specifier: TYPE 
    | StructSpecifier 
    ;
StructSpecifier: STRUCT OptTag LC DefList RC 
    | STRUCT Tag 
    ;
OptTag: ID 
    | /* empty */ 
    ;
Tag: ID 
    ;
VarDec: ID 
    | VarDec LB INT RB 
    ;
FunDec: ID LP VarList RP 
    | ID LP RP 
    ;
VarList: ParamDec COMMA VarList 
    | ParamDec 
    ;
ParamDec: Specifier VarDec
    ;
CompSt: LC DefList StmtList RC 
    ;
StmtList: Stmt StmtList 
    | /* empty */ 
    ;
Stmt: Exp SEMI 
    | CompSt 
    | RETURN Exp SEMI
    | IF LP Exp RP Stmt 
    | IF LP Exp RP Stmt ELSE Stmt 
    | WHILE LP Exp RP Stmt 
    ;
DefList: Def DefList 
    | /* empty */ 
    ;
Def: Specifier DecList SEMI
    ;
DecList: Dec 
    | Dec COMMA DecList 
    ;
Dec: VarDec
    | VarDec ASSIGNOP Exp
    ;
Exp: Exp ASSIGNOP Exp 
    | Exp AND Exp 
    | Exp OR Exp 
    | Exp RELOP Exp 
    | Exp PLUS Exp 
    | Exp MINUS Exp 
    | Exp STAR Exp 
    | Exp DIV Exp 
    | LP Exp RP 
    | MINUS Exp %prec NOT 
    | NOT Exp 
    | ID LP Args RP
    | ID LP RP 
    | Exp LB Exp RB
    | Exp DOT ID 
    | ID 
    | INT 
    | FLOAT 
    ;
Args: Exp COMMA Args 
    | Exp 
    ;

%%

void yyerror(char* msg) {
    fprintf(stderr, "Error type B at line %d: %s.\n", yylineno, msg);
}
